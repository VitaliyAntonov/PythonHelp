package lectures.week1basics

object Recursion extends App{
  // В функциональном программировании стоит отказаться от использования циклов, вместо них стоит использоваться рекурсию
  def factorial(n: Int): Int = { // Функция вычисления факториала
    if (n <= 0) 1
    else n * factorial(n - 1)
  }
  println(factorial(3)) // выводит 6
  // Переписанный код с использованием хвостовой рекурсии
  def factorialWithTailRecursion(n: Int): Int = {
    def loop(x: Int, accumulator: Int): Int = {
      if (x <= 1) accumulator
      else loop(x-1, x*accumulator)
    }

    loop(n, 1)
  }
  // Отличительной особенностью функции с хвостовой рекурсией является то, что последней операцией идет вызов этой самой функции.
  // И теперь промежуточные вычисления накапливаются в аккумуляторе.

  // Как писать функции в стиле хвостовой рекурсии
  // 1. Определяете функцию. Назовем ее основной.
  // 2. Внутри основной функции прописываете еще одну функцию. Назовем ее вспомогательной.
  // 3. В качестве аргументов вспомогательной функции указываете число вызовов (этот аргумент совпадает с одним из аргументов основной функции) - плюс аккумулятор, который будет содержать конечный результат.
  // 4. Прописываете код с рекурсией в теле вспомогательной функции с использованием аккумулятора (так, чтобы значение постепенно накапливалось)
  // 5. Вызываете вспомогательную функцию из основной функции. Не забудьте указать начальное значение аккумулятора, задающее отправную точку всех вычислений. Используйте аргумент по умолчанию для оптимизации кода.
  // Можно использовать аннотацию @tailrec для проверки.
  import scala.annotation.tailrec
  def factorialWithTailRecursion2(n: Int): Int = {
    @tailrec
    def loop(x: Int, accumulator: Int = 1): Int = {
      if (x <= 1) accumulator
      else loop(x-1, x*accumulator)
    }

    loop(n)
  }

  def repeatWord(word: String, n: Int): String = { // Функция вывода слова n-раз
    @tailrec // Проверка на хвостовую рекурсию, иначе код не запустится
    def loop(i: Int, acc: String = word): String = { // Передаем в функцию n, acc: String(слово)
      if (i <= 1) acc // Если n <= 1 то возвращаем слово
      else loop(i - 1, s"$word $acc") // иначе вызываем функцию передавая счетчик - 1 и слово
    }

    loop(n)
  }
}
