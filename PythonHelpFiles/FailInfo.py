class FailInfo:
    """
    В данной статье мы рассмотрим встроенные средства python для работы с файлами: открытие / закрытие, чтение и запись.

    Ссылка:     https://pythonworld.ru/tipy-dannyx-v-python/fajly-rabota-s-fajlami.html
    """
    #Прежде, чем работать с файлом, его надо открыть.

    '''
    Команда pass нужна пока не введена ни одна из функций def
    '''
    def open_help(self):
        '''
        Итак, начнем. Прежде, чем работать с файлом, его надо открыть. С этим замечательно справится встроенная функция open:
        fail = open('FailText.txt')
        У функции open много параметров:
      open(file, mode='r', buffering=None, encoding=None, errors=None, newline=None, closefd=True)
        - Открывает файл и возвращает соответствующий поток.
         Нам пока важны 3 аргумента:
         * первый, это имя файла. Путь к файлу может быть относительным или абсолютным.
         * Второй аргумент, это режим, в котором мы будем открывать файл.
         Режим	Обозначение
        'r'	открытие на чтение (является значением по умолчанию).
        'w'	открытие на запись, содержимое файла удаляется, если файла не существует, создается новый.
        'x'	открытие на запись, если файла не существует, иначе исключение.
        'a'	открытие на дозапись, информация добавляется в конец файла.
        'b'	открытие в двоичном режиме.
        't'	открытие в текстовом режиме (является значением по умолчанию).
        '+'	открытие на чтение и запись
        Режимы могут быть объединены, то есть, к примеру, 'rb' - чтение в двоичном режиме.
        По умолчанию режим равен 'rt'.
        * И последний аргумент из рассмотренных, encoding, нужен только в текстовом режиме чтения файла.
         Этот аргумент задает кодировку.
        '''
    #fail = open('FailText.txt')
        # Чтение из файла
    '''Открыли мы файл, а теперь мы хотим прочитать из него информацию.
        Для этого есть несколько способов, но большого интереса заслуживают лишь два из них:
    '''
    def read_help(self):
        '''
        Первый - метод read, читающий весь файл целиком, если был вызван без аргументов,
        print(fail.read())
        и n символов, если был вызван с аргументом (целым числом n).
        print(fail.read(1))

    Ещё один способ сделать это - прочитать файл построчно,
    воспользовавшись циклом for:
        >> > fail = open('text.txt')
        >> > for line in fail:
            ...
            line
        ...
        'Hello world!\n'
        '\n'
        'The end.\n'
        '\n'
        '''
    # Запись в файл
    def write_help(self):
        '''
        Запись в файл осуществляется с помощью метода write:

        Теперь рассмотрим запись в файл. Попробуем записать в файл вот такой вот список:
        l = [str(i)+str(i-1) for i in range(20)]
        l >>>
        ['0-1', '10', '21', '32', '43', '54', '65', '76', '87', '98', '109', '1110', '1211', '1312', '1413', '1514', '1615', '1716', '1817', '1918']
    
        # Откроем файл на запись:
        #fail = open('RezText.txt', 'w')
        for index in l:
        ...     fail.write(index + '\n')
        ...
        4
        3
        3
        Для тех, кто не понял, что это за цифры, поясню: метод write возвращает число записанных символов.
        '''

    def close_help(self):
        '''
        После окончания работы с файлом его обязательно нужно закрыть с помощью метода close:
        >> fail.close()
        '''
    def example_help(self):
        '''
        Теперь попробуем воссоздать этот список из получившегося файла.
        Откроем файл на чтение (надеюсь, вы поняли, как это сделать?), и прочитаем строки.
        f = open('text.txt', 'r')
        l = [line.strip() for line in f]
        l
        ['0-1', '10', '21', '32', '43', '54', '65', '76', '87', '98', '109', '1110', '1211', '1312', '1413', '1514', '1615', '1716', '1817', '1918']
        f.close()
        Мы получили тот же список, что и был.
        В более сложных случаях (словарях, вложенных кортежей и т. д.) алгоритм записи придумать сложнее.
        Но это и не нужно. В python уже давно придумали средства, такие как pickle или json, позволяющие сохранять в файле сложные структуры.
        '''


def read_help(key):
    #print("Hello Petrovich!")
    print(fail.read(int(key)))


if __name__ == '__main__':
    fail = open('FailText.txt')
    key = input('Введите аргумент (целое число)-')
    if key != '':
        print(fail.read(int(key)))
        #break
    else:
        print(fail.read())
        #return#continue#break#
    #fail.close()
    #read_help(key)
#read_help(key)

    #print(fail.read())
    #print('PyCharm')
    #hWord()

